var SVGTableVanilla;
/******/ // The require scope
/******/ var __webpack_require__ = {};
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "__private__": () => (/* reexport */ __private__),
  "convertToKebabCaseProps": () => (/* reexport */ convertToKebabCaseProps),
  "createRenderedString": () => (/* reexport */ createRenderedString),
  "createVanillaElement": () => (/* reexport */ createVanillaElement),
  "default": () => (/* reexport */ dist),
  "kebabize": () => (/* reexport */ kebabize),
  "simpleValue": () => (/* reexport */ simpleValue)
});

;// CONCATENATED MODULE: ../node_modules/@shjeon0730/svg-table-core/dist/consts.js
const INTERNAL_CSS_VARS = Object.freeze({
    borderLineColor: '--line-default-stroke',
    textColor: '--text-default-color',
});
const DEFAULT_COLORS = Object.freeze({
    border: '#000',
});
const DEFAULT_WITH_CSSVARS = Object.freeze({
    border: `var(${INTERNAL_CSS_VARS.borderLineColor}, ${DEFAULT_COLORS.border})`,
});
//# sourceMappingURL=consts.js.map
;// CONCATENATED MODULE: ../node_modules/@shjeon0730/svg-table-core/dist/utils.js

const getValFromArr = (arr, pos) => {
    if (arr.length === 4) {
        switch (pos) {
            case 'left':
                return arr[3];
            case 'right':
                return arr[1];
            case 'bottom':
                return arr[2];
            default:
            case 'top':
                return arr[0];
        }
    }
    else if (arr.length === 2) {
        switch (pos) {
            case 'left':
                return arr[1];
            case 'right':
                return arr[1];
            case 'top':
            case 'bottom':
            default:
                return arr[0];
        }
    }
    return;
};
const getWid = (widths, pos) => {
    if (widths === undefined)
        return 0;
    if (typeof widths === 'number')
        return widths;
    if (Array.isArray(widths)) {
        const val = getValFromArr(widths, pos);
        if (val !== undefined)
            return val;
    }
    console.error('Invalid widths type: ', widths, 'for', pos, ' should be number or [number, number, number, number] or [number, number]');
    return 0;
};
const getWidVisible = (widths) => {
    if (widths === undefined)
        return false;
    if (typeof widths === 'number')
        return widths > 0;
    if (Array.isArray(widths)) {
        return widths.some(w => w > 0);
    }
    return false;
};
const getStrokeColor = (colors, pos) => {
    if (!colors)
        return undefined;
    if (typeof colors === 'string')
        return colors;
    if (Array.isArray(colors)) {
        if (pos) {
            const val = getValFromArr(colors, pos);
            if (val !== undefined)
                return val;
        }
        else {
            return (colors && Array.isArray(colors) ? colors[0] : colors) ?? DEFAULT_WITH_CSSVARS.border;
        }
    }
    console.error('Invalid colors type: ', colors, ' should be string or [string, string, string, string] or [string, string]');
    return DEFAULT_WITH_CSSVARS.border;
};
const isValidateArrayType = (arr, type) => {
    return Array.isArray(arr) && arr.every(item => typeof item === type);
};
const isValidate2DArrayType = (arr, type) => {
    return (Array.isArray(arr) &&
        arr.every(item => {
            return Array.isArray(item) && isValidateArrayType(item, type);
        }));
};
const getDashArray = (dashArrays, pos) => {
    if (dashArrays === undefined)
        return undefined;
    if (isValidateArrayType(dashArrays, 'number')) {
        return dashArrays.map(a => a.toString()).join(' ');
    }
    if (isValidate2DArrayType(dashArrays, 'number')) {
        const arr = dashArrays;
        const val = getValFromArr(arr, pos);
        if (val !== undefined)
            return val.map(a => a.toString()).join(' ');
    }
    console.error('Invalid dashArrays type: ', dashArrays, ' should be number[] or [number[], number[], number[], number[]] or [number[], number[]]');
    return undefined;
};
const validatedBorderShape = (borderShape, dashArrays) => {
    if (!dashArrays && !borderShape)
        return undefined;
    if (!dashArrays) {
        console.warn('border shape does not have any effect without dash arrays. automatically ignoring it.');
        return undefined;
    }
    if (!borderShape || borderShape === 'butt') {
        const dashArrs = dashArrays.split(' ');
        if (dashArrs.some((val, idx) => val === '0' && idx % 2 === 0)) {
            console.error('"butt" border shape(or undefined - default) will not be shown with 0 size. in odd order. i.e. stroke-dasharray="0 1" will not be shown since the first value is 0.', '\n\nyour dash array:', dashArrays);
        }
    }
    return borderShape;
};
const getBorderShape = (borderShapes, dashArrays, pos) => {
    if (!borderShapes)
        return validatedBorderShape(borderShapes, getDashArray(dashArrays, pos));
    if (typeof borderShapes === 'string')
        return validatedBorderShape(borderShapes, getDashArray(dashArrays, pos));
    if (Array.isArray(borderShapes)) {
        const val = getValFromArr(borderShapes, pos);
        if (val !== undefined) {
            return validatedBorderShape(val, getDashArray(dashArrays, pos));
        }
    }
    console.error('Invalid borderShapes type: ', borderShapes, ' should be string or [string, string, string, string] or [string, string]');
    return 'butt';
};
const isBorderRect = (style) => {
    const { borderWidths, borderColors, borderPatterns, bgColor, rx, ry } = style;
    if (!bgColor)
        return false;
    return ((!rx || typeof rx === 'number') &&
        (!ry || typeof ry === 'number') &&
        (!borderWidths || typeof borderWidths === 'number') &&
        (!borderColors || typeof borderColors === 'string') &&
        (!borderPatterns || (Array.isArray(borderPatterns) && typeof borderPatterns[0] === 'number')));
};
const getRectStyle = (style) => {
    if (!isBorderRect(style))
        return null;
    const { bgColor, borderWidths, borderColors, borderPatterns, rx, ry } = style;
    return {
        ...(bgColor ? { fill: bgColor } : {}),
        ...(rx || ry ? { rx: rx ?? 0, ry: ry ?? 0 } : {}),
        stroke: (borderColors ?? DEFAULT_WITH_CSSVARS.border),
        strokeWidth: borderWidths,
        strokeDasharray: getDashArray(borderPatterns, 'left'),
    };
};
const simpleValue = (val) => {
    return parseFloat(val.toFixed(2));
};
const camelToKebabCase = (str) => str.replace(/[A-Z]/g, letter => `-${letter.toLowerCase()}`);
const kebabToCamelCase = (str) => str
    .split('-')
    .map((v, i) => (i === 0 ? v : v[0]?.toUpperCase() + v.substring(1)))
    .join('');
const getDuplicatedProps = (attr) => {
    Object.keys(attr).forEach(key => {
        attr[camelToKebabCase(key)] = attr[key];
    });
    Object.keys(attr).forEach(key => {
        attr[kebabToCamelCase(key)] = attr[key];
    });
};
//# sourceMappingURL=utils.js.map
;// CONCATENATED MODULE: ../node_modules/@shjeon0730/svg-table-core/dist/element.js
const element_element = (type, attrs, ...children) => {
    const validChildren = children.filter(child => child !== undefined && child !== null);
    return Object.keys(attrs).length > 0 || validChildren.length > 0
        ? {
            __internal: 'svg-table-element-as-obj',
            type,
            attrs,
            children: validChildren.length > 0 && Array.isArray(validChildren[0]) ? validChildren[0] : validChildren,
        }
        : undefined;
};
//# sourceMappingURL=element.js.map
;// CONCATENATED MODULE: ../node_modules/@shjeon0730/svg-table-core/dist/PathOnArea.js


const Path = ({ startPt, endPt, width, borderColors, borderPatterns, borderShapes, pos, className, }) => {
    if (width === 0)
        return null;
    return element_element('path', {
        className: className ? `${pos}-path` : undefined,
        d: `M${startPt} L${endPt}`,
        strokeWidth: width,
        stroke: getStrokeColor(borderColors, pos),
        strokeDasharray: getDashArray(borderPatterns, pos),
        strokeLinecap: getBorderShape(borderShapes, borderPatterns, pos),
    });
};
const getPt = (x, y) => `${x},${y}`;
const PathOnArea = (props) => {
    const { width, height, borderWidths, borderColors, borderPatterns, borderShapes, className, rx = 0, ry = 0, } = props;
    const PathProps = {
        borderColors,
        borderPatterns,
        borderShapes,
    };
    const cornerExist = rx && ry;
    const leftTop = getPt(0, 0);
    const leftBottom = getPt(0, height - 0);
    const rightTop = getPt(width - 0, 0);
    const rightBottom = getPt(width - 0, height - 0);
    if (cornerExist) {
        const width = (borderWidths && Array.isArray(borderWidths) ? borderWidths[0] : borderWidths) ?? 0;
        if (!width)
            return null;
        const leftLineTop = getPt(0, ry);
        const leftLineBottom = getPt(0, height - ry);
        const topLineLeft = getPt(rx, 0);
        const topLineRight = getPt(width - rx, 0);
        const rightLineTop = getPt(width, ry);
        const rightLineBottom = getPt(width, height - ry);
        const bottomLineLeft = getPt(rx, height);
        const bottomLineRight = getPt(width - rx, height);
        return element_element('g', {
            className: className ? `paths-on-area ${className}` : undefined,
        }, element_element('path', {
            className: className ? `${className}-corner-path` : undefined,
            d: `M${leftLineTop} Q${leftTop},${topLineLeft} L${topLineRight} Q${rightTop},${rightLineTop} L${rightLineBottom} Q${rightBottom},${bottomLineRight} L${bottomLineLeft} Q${leftBottom},${leftLineBottom} L${leftLineTop}`,
            strokeWidth: width,
            stroke: getStrokeColor(borderColors),
            strokeDasharray: getDashArray(borderPatterns),
            strokeLinecap: getBorderShape(borderShapes, borderPatterns),
        }));
    }
    else {
        const leftWid = getWid(borderWidths, 'left');
        const rightWid = getWid(borderWidths, 'right');
        const topWid = getWid(borderWidths, 'top');
        const bottomWid = getWid(borderWidths, 'bottom');
        return element_element('g', {
            className: className ? `paths-on-area ${className}` : undefined,
        }, !!leftWid &&
            Path({
                startPt: leftTop,
                endPt: leftBottom,
                width: leftWid,
                ...PathProps,
                pos: 'left',
            }), !!rightWid &&
            Path({
                startPt: rightTop,
                endPt: rightBottom,
                width: rightWid,
                ...PathProps,
                pos: 'right',
            }), !!topWid &&
            Path({
                startPt: leftTop,
                endPt: rightTop,
                width: topWid,
                ...PathProps,
                pos: 'top',
            }), !!bottomWid &&
            Path({
                startPt: leftBottom,
                endPt: rightBottom,
                width: bottomWid,
                ...PathProps,
                pos: 'bottom',
            }));
    }
};
//# sourceMappingURL=PathOnArea.js.map
;// CONCATENATED MODULE: ../node_modules/@shjeon0730/svg-table-core/dist/FilledArea.js



const FilledArea = (props) => {
    const { bgColor, width, height, borderWidths, borderColors, borderPatterns, borderShapes, className, rx, ry } = props;
    const isBgColorVisible = bgColor && bgColor !== 'transparent';
    const isBorderOnRect = isBgColorVisible && isBorderRect(props);
    const rectStyleProps = isBorderOnRect ? getRectStyle(props) : { fill: bgColor };
    const isFilledAreaVisible = isBgColorVisible || getWidVisible(borderWidths);
    return isFilledAreaVisible
        ? element_element('g', {
            className: className ? `filled-area ${className ?? ''}` : undefined,
        }, isBgColorVisible &&
            element_element('rect', {
                width: width,
                height: height,
                ...rectStyleProps,
            }), !isBorderOnRect &&
            PathOnArea({
                className: className ? 'paths-on-area-for-filled-area' : undefined,
                width: width,
                height: height,
                borderWidths: borderWidths,
                borderColors: borderColors,
                borderPatterns: borderPatterns,
                borderShapes: borderShapes,
                rx,
                ry,
            }))
        : undefined;
};
/* harmony default export */ const dist_FilledArea = (FilledArea);
//# sourceMappingURL=FilledArea.js.map
;// CONCATENATED MODULE: ../node_modules/@shjeon0730/svg-table-core/dist/CenteredCellContent.js


const CenteredCellContent = ({ cellOpt, styleToUse, children, }) => {
    let { width, height, className } = cellOpt;
    let { rotateCenterProps, cx = 0, cy = 0 } = styleToUse;
    const propsToPassForGroup = (startX, startY) => ({
        x: simpleValue(startX),
        y: simpleValue(startY),
        width,
        height,
    });
    const rotationGroupProps = {
        ...(typeof rotateCenterProps === 'function'
            ? rotateCenterProps(propsToPassForGroup(width / 2 + cx, height / 2 + cy))
            : rotateCenterProps),
    };
    getDuplicatedProps(rotationGroupProps);
    width = Math.max(width, 1);
    height = Math.max(height, 1);
    return element_element('svg', {
        viewBox: `${-width / 2} ${-height / 2} ${width} ${height}`,
        style: { overflow: 'visible' },
    }, element_element('g', {
        className: className ? `${className}-content` : undefined,
    }, element_element('g', rotationGroupProps, children)));
};
//# sourceMappingURL=CenteredCellContent.js.map
;// CONCATENATED MODULE: ../node_modules/@shjeon0730/svg-table-core/dist/ACell.js





const moveToLeftTop = (width, height, content) => {
    return element_element('g', {
        transform: `translate(${-width / 2}, ${-height / 2})`,
    }, content);
};
const convertToTableIfNeeded = (contentTouse, width, height, paddings, cellOpt) => {
    if (contentTouse.table) {
        const padLeft = getWid(paddings, 'left');
        const padTop = getWid(paddings, 'top');
        const padRight = getWid(paddings, 'right');
        const padBottom = getWid(paddings, 'bottom');
        const tableWid = simpleValue(width - padRight - padLeft);
        const adjustProps = cellOpt._heightAdjust
            ? {
                height: simpleValue(Math.max(height - padTop - padBottom, 1)),
            }
            : {};
        if (cellOpt._standalone)
            adjustProps.standalone = true;
        return SVGTableBase({
            width: simpleValue(tableWid),
            ...adjustProps,
            ...contentTouse.table,
        });
    }
    return contentTouse;
};
const renderTextOnly = (contentToRender, startX, startY, textAnchor, styleToApply = {}) => {
    const lines = contentToRender.split('\n');
    let textToRender = [contentToRender];
    if (lines.length > 1) {
        const fontSize = styleToApply.fontSize || 16;
        textToRender = lines
            .filter(v => v)
            .map((line, index) => element_element('tspan', {
            fontSize,
            x: startX,
            dy: index === 0 ? 0 : fontSize,
        }, line));
        startY = startY - ((lines.length - 1) * simpleValue(fontSize)) / 2;
    }
    const props = {
        x: simpleValue(startX),
        y: simpleValue(startY),
        textAnchor: textAnchor,
        dominantBaseline: 'middle',
        ...styleToApply,
    };
    getDuplicatedProps(props);
    return element_element('text', props, ...textToRender);
};
const styleWithFill = (style, color) => {
    return {
        fill: color,
        ...style,
    };
};
const getAriaProps = (cellOpt) => {
    return JSON.parse(JSON.stringify({
        'aria-colspan': cellOpt.colSpan && cellOpt.colSpan > 1 ? cellOpt.colSpan : undefined,
        'aria-rowspan': cellOpt.rowSpan && cellOpt.rowSpan > 1 ? cellOpt.rowSpan : undefined,
    }));
};
const getContents = (cellOpt, styleToUse) => {
    const { content, width, height, before, after } = cellOpt;
    let { paddings, textColor, textStyle, cx = 0, cy = 0 } = styleToUse;
    textStyle = styleWithFill(textStyle, textColor);
    const { content: before2, ...beforeOpts } = typeof before === 'object' && before.content
        ? before
        : { content: before };
    const { content: after2, ...afterOpts } = typeof after === 'object' && after.content
        ? after
        : { content: after };
    const beforeTextStyle = styleWithFill(beforeOpts.textStyle, textColor);
    const afterTextStyle = styleWithFill(afterOpts.textStyle, textColor);
    const propsToPass = (textStyleToUse, anchorBase, startX, startY) => ({
        x: simpleValue(startX),
        y: simpleValue(startY),
        width,
        height,
        textColor,
        textStyle: {
            textAnchor: anchorBase,
            dominantBaseline: 'middle',
            ...textStyleToUse,
        },
    });
    const getContent = () => {
        if (typeof content === 'function') {
            let node = content(propsToPass(textStyle, 'middle', width / 2 + cx, height / 2 + cy));
            return node;
        }
        else if (typeof content === 'object') {
            const node = convertToTableIfNeeded(content, width, height, paddings, cellOpt);
            return node;
        }
        else {
            return content;
        }
    };
    const contentToUse = getContent();
    let beforeToUse = typeof before2 === 'function' ? before2(propsToPass(beforeTextStyle, 'start', 0, height / 2)) : before2;
    let afterToUse = typeof after2 === 'function' ? after2(propsToPass(afterTextStyle, 'end', width, height / 2)) : after2;
    const beforeContent = beforeToUse && typeof beforeToUse === 'string'
        ? renderTextOnly(beforeToUse, 0, height / 2, 'start', beforeTextStyle)
        : beforeToUse;
    const afterContent = afterToUse && typeof afterToUse === 'string'
        ? renderTextOnly(afterToUse, width, height / 2, 'end', afterTextStyle)
        : afterToUse;
    const mainContent = typeof contentToUse === 'string'
        ? renderTextOnly(contentToUse, cx, cy, 'middle', textStyle)
        : moveToLeftTop(width, height, contentToUse);
    return {
        beforeContent,
        afterContent,
        mainContent,
    };
};
const FilledAreaInCell = ({ cellOpt, styleToUse, }) => {
    const { width, height, className } = cellOpt;
    let { bgColor, borderWidths, borderColors, borderPatterns, borderShapes, rx, ry } = styleToUse;
    return dist_FilledArea({
        className: className ? `${className}-filled-back` : undefined,
        width: width,
        height: height,
        borderWidths: borderWidths,
        borderColors: borderColors,
        borderPatterns: borderPatterns,
        borderShapes: borderShapes,
        rx,
        ry,
        ...(bgColor ? { bgColor } : {}),
    });
};
const ACell = ({ cellOpt, defaultStyle, }) => {
    if (cellOpt._ignored)
        return null;
    let { x, y, width, height, style, className } = cellOpt;
    const styleToUse = {
        ...defaultStyle,
        ...style,
    };
    let { paddings, svgStyle, allowOverflow } = styleToUse;
    const padLeft = getWid(paddings, 'left');
    const padTop = getWid(paddings, 'top');
    const svgStyleToUse = {
        ...svgStyle,
        ...(allowOverflow ? { overflow: 'visible' } : {}),
    };
    const ariaProps = getAriaProps(cellOpt);
    const { beforeContent, afterContent, mainContent } = getContents(cellOpt, styleToUse);
    width = Math.max(width, 1);
    height = Math.max(height, 1);
    return element_element('g', {
        transform: `translate(${x}, ${y})`,
        className: className ? `${className}-wrapper` : undefined,
    }, FilledAreaInCell({ cellOpt: cellOpt, styleToUse: styleToUse }), element_element('svg', {
        width: width,
        height: height,
        style: svgStyleToUse,
        viewBox: `0 0 ${width} ${height}`,
        className: className ? className : undefined,
    }, element_element('g', {
        transform: `translate(${padLeft}, ${padTop})`,
        className: className ? `${className}-padding` : undefined,
        role: 'cell',
        ...ariaProps,
    }, beforeContent, CenteredCellContent({
        cellOpt: cellOpt,
        styleToUse: styleToUse,
        children: mainContent,
    }), afterContent)));
};
//# sourceMappingURL=ACell.js.map
;// CONCATENATED MODULE: ../node_modules/@shjeon0730/svg-table-core/dist/calculateRows.js

let debugObj = {};
const getCellWidth = (cellWidths, startCol, colSpan, colGap) => {
    if (cellWidths.length < startCol + colSpan - 1) {
        console.error('Not enough column widths provided. check colSpan of the cell data. startCol: ' + startCol, 'data is:', JSON.parse(JSON.stringify(debugObj)));
    }
    return simpleValue(cellWidths.slice(startCol, startCol + colSpan).reduce((total, width) => total + width, 0) +
        colGap * (colSpan - 1));
};
const getCellHeight = (rowHeights, startRow, rowSpan, rowGap) => {
    if (rowHeights.length < startRow + rowSpan - 1) {
        console.error('Not enough row heights provided. check rowSpan of the cell data. startRow: ' + startRow, 'data is:', JSON.parse(JSON.stringify(debugObj)));
    }
    return (rowHeights.slice(startRow, startRow + rowSpan).reduce((total, height) => total + height, 0) +
        rowGap * (rowSpan - 1));
};
const insertIgnoredCell = (row, colIndex, cell) => {
    row.cells = [
        ...(row.cells.slice(0, colIndex) ?? []),
        ...Array(cell.colSpan ?? 1)
            .fill(null)
            .map(() => ({
            _ignored: true,
            colSpan: 1,
        })),
        ...(row.cells.slice(colIndex) ?? []),
    ];
};
const calculateRows = (cellWidths, rowHeights, rows, style, tableProps) => {
    let currentY = 0;
    const embededTableHeightAdjust = !!tableProps.height;
    const standaloneTable = !!tableProps.standalone;
    const calcRows = rows.map(aRow => {
        const row = Array.isArray(aRow) ? { cells: aRow } : aRow;
        return {
            ...row,
            x: 0,
            y: currentY,
            height: -1,
            width: -1,
            cells: [
                ...row.cells.map(aCell => {
                    const cell = typeof aCell === 'string' ? { content: aCell } : aCell;
                    return {
                        ...cell,
                        x: -1,
                        y: -1,
                        height: -1,
                        width: -1,
                        _ignored: false,
                        _heightAdjust: embededTableHeightAdjust,
                        _standalone: standaloneTable,
                    };
                }),
            ],
        };
    });
    for (let ri = 0; ri < calcRows.length; ri++) {
        const row = calcRows[ri];
        if (!row)
            continue;
        let currentX = 0;
        let idx = 0;
        for (const cell of row.cells) {
            debugObj = {
                row: row,
                cell: cell,
            };
            if (cell._ignored) {
                const widToSkip = getCellWidth(cellWidths, idx, 1, style?.colGaps ?? 0);
                idx += 1;
                currentX += widToSkip + (style?.colGaps ?? 0);
                continue;
            }
            const isLastCellButNotLastColumn = row.cells[row.cells.length - 1] === cell && idx !== cellWidths.length - 1;
            const colSpan = isLastCellButNotLastColumn ? cellWidths.length - idx : 1;
            cell.colSpan = colSpan;
            const cellWidth = getCellWidth(cellWidths, idx, cell.colSpan, style?.colGaps ?? 0);
            if (cell.rowSpan) {
                for (let i = 1; i < cell.rowSpan; i++) {
                    if (calcRows[ri + i]) {
                        insertIgnoredCell(calcRows[ri + i], idx, cell);
                    }
                    else {
                        console.error('row is not found at index: ' + (idx + i), 'your cell is:', cell, 'your rows are', calcRows, 'idx is', idx);
                    }
                }
            }
            cell.width = cellWidth;
            cell.height = getCellHeight(rowHeights, ri, cell.rowSpan ?? 1, style?.rowGaps ?? 0);
            cell.x = simpleValue(currentX);
            cell.y = simpleValue(currentY);
            currentX += cellWidth + (style?.colGaps ?? 0);
            idx += 1;
        }
        currentY += (rowHeights[ri] ?? 0) + (style?.rowGaps ?? 0);
        row.height = currentY;
        row.width = currentX;
    }
    return calcRows;
};
//# sourceMappingURL=calculateRows.js.map
;// CONCATENATED MODULE: ../node_modules/@shjeon0730/svg-table-core/dist/SVGTableBase.js






const getTotalCells = (cells) => {
    return cells.reduce((total, cell) => {
        const cellAsObj = cell;
        if (typeof cellAsObj === 'object' && cellAsObj.colSpan) {
            return total + cellAsObj.colSpan;
        }
        return total + 1;
    }, 0);
};
const parsedTableStyle = (style) => {
    return {
        rowGaps: 0,
        colGaps: 0,
        borderWidths: undefined,
        borderPatterns: undefined,
        borderShapes: undefined,
        borderColors: style?.borderWidths ? `var(${INTERNAL_CSS_VARS.borderLineColor}, #000)` : undefined,
        svgStyle: { overflow: 'visible' },
        ...style,
        margins: style?.margins ?? 0,
    };
};
const parseDefaultCellStyleBase = (defaultCellStyleBase) => {
    return {
        allowOverflow: false,
        borderWidths: 1,
        bgColor: undefined,
        textStyle: undefined,
        borderColors: `var(${INTERNAL_CSS_VARS.borderLineColor}, #000)`,
        borderPatterns: undefined,
        borderShapes: undefined,
        paddings: [1, 1, 1, 1],
        textColor: `var(${INTERNAL_CSS_VARS.textColor}, #000)`,
        ...defaultCellStyleBase,
        onlyInnerBorders: defaultCellStyleBase?.rx && defaultCellStyleBase?.ry
            ? true
            : (defaultCellStyleBase?.onlyInnerBorders ?? false),
    };
};
const adjustColumnWidths = (columnWidths, tableWidthWithoutGaps) => {
    const totalWidth = columnWidths.reduce((total, width) => total + width, 0);
    const ratio = tableWidthWithoutGaps / totalWidth;
    if (ratio > 0.99 && ratio <= 1.01)
        return columnWidths;
    return columnWidths.map(width => Math.max(simpleValue(width * ratio), 1));
};
const adjustRowHeights = (rowHeights, tableHeightWithoutGaps) => {
    const totalHeight = rowHeights.reduce((total, width) => total + width, 0);
    const ratio = tableHeightWithoutGaps / totalHeight;
    if (ratio > 0.99 && ratio <= 1.01)
        return rowHeights;
    return rowHeights.map(width => Math.max(simpleValue(width * ratio), 1));
};
let maskIdSrc = 0;
const SVGTableBase = (tablePropsWithStandalone) => {
    const { standalone = false, ...tableProps } = tablePropsWithStandalone;
    let { rows, width = 500, height: heightFromProps, defaultCellStyle, defaultRowStyle, columnWidths, rowHeights: rowHeightFromProps, style, className, defs, svgAttrs, } = tableProps;
    const defaultStyleForCell = parseDefaultCellStyleBase(defaultCellStyle);
    const maxColumns = Math.max(rows.reduce((max, row) => Array.isArray(row) ? Math.max(max, row.length) : Math.max(max, getTotalCells(row.cells)), 0), 1);
    const tableStyle = parsedTableStyle(style);
    const isRoundedCorner = !!(tableStyle.rx && tableStyle.ry);
    const allColGaps = (maxColumns - 1) * tableStyle.colGaps +
        getWid(tableStyle.margins, 'left') +
        getWid(tableStyle.margins, 'right');
    const allRowGaps = (rows.length - 1) * tableStyle.rowGaps +
        getWid(tableStyle.margins, 'top') +
        getWid(tableStyle.margins, 'bottom');
    const defaultStyleForRow = {
        height: 30,
        ...defaultRowStyle,
    };
    let height = heightFromProps ??
        rows.reduce((h, row) => {
            if (Array.isArray(row)) {
                return h + defaultStyleForRow.height;
            }
            return h + (row.style?.height ?? defaultStyleForRow.height);
        }, 0) + allRowGaps;
    height = Math.max(simpleValue(height), 1);
    width = Math.max(simpleValue(width), 1);
    const cellWidths = columnWidths
        ? adjustColumnWidths(columnWidths, width - allColGaps)
        : Array(maxColumns).fill(simpleValue((width - allColGaps) / maxColumns));
    let rowHeights = rowHeightFromProps ??
        rows.map(row => row.style?.height ?? defaultStyleForRow.height);
    if (heightFromProps) {
        rowHeights = adjustRowHeights(rowHeights, heightFromProps - allRowGaps);
        for (let i = 0; i < rows.length; i++) {
            const rowHeightFromRowStyle = rows[i]?.style?.height;
            if (rowHeightFromRowStyle && typeof rowHeights[i] === 'number') {
                rowHeights[i] = rowHeightFromRowStyle;
            }
        }
    }
    const calculatedRows = calculateRows(cellWidths, rowHeights, rows, tableStyle, tableProps);
    const rowsContent = calculatedRows.map((row, rowIndex) => {
        const rowContent = [];
        if (row.style?.bgColor) {
            rowContent.push(element_element('g', {
                transform: `translate(${row.x}, ${row.y})`,
                className: className ? `${className}-row-${rowIndex}-wrapper` : undefined,
            }, dist_FilledArea({
                className: className ? `${className}-filled-area-behind-table` : undefined,
                width: row.width,
                height: row.height,
                bgColor: row.style.bgColor,
                borderWidths: row.style.borderWidths,
                borderColors: row.style.borderColors,
                borderPatterns: row.style.borderPatterns,
                borderShapes: row.style.borderShapes,
                rx: row.style.rx,
                ry: row.style.ry,
            })));
        }
        for (const cell of row.cells) {
            rowContent.push(ACell({
                cellOpt: cell,
                defaultStyle: defaultStyleForCell,
            }));
        }
        return element_element('g', {
            role: 'row',
            className: className ? `${className}-row-${rowIndex}` : undefined,
        }, ...rowContent);
    });
    const propsForSvg = standalone
        ? {
            xmlns: 'http://www.w3.org/2000/svg',
            xmlnsXlink: 'http://www.w3.org/1999/xlink',
        }
        : {
            width,
            height,
        };
    const maskName = `svg-table-mask-${className}-${maskIdSrc++ % 10000000}`;
    return element_element('svg', {
        ...propsForSvg,
        viewBox: `0 0 ${width} ${height}`,
        xmlns: 'http://www.w3.org/2000/svg',
        className: className ? `svg-table ${className}` : undefined,
        ...svgAttrs,
        style: { overflow: 'visible' },
    }, defs && element_element('defs', {}, defs), isRoundedCorner &&
        element_element('mask', {
            id: maskName,
        }, [
            element_element('rect', {
                width: width,
                height: height,
                fill: 'black',
            }),
            element_element('rect', {
                width: width,
                height: height,
                rx: tableStyle.rx,
                ry: tableStyle.ry,
                fill: 'white',
            }),
        ]), dist_FilledArea({
        className: className ? `${className}-filled-area-behind-table` : undefined,
        width: width,
        height: height,
        bgColor: tableStyle.bgColor,
        borderWidths: tableStyle.borderWidths,
        borderColors: tableStyle.borderColors,
        borderPatterns: tableStyle.borderPatterns,
        borderShapes: tableStyle.borderShapes,
        rx: tableStyle.rx,
        ry: tableStyle.ry,
    }), element_element('g', {
        role: 'table',
        className: className ? `${className}-content-area` : undefined,
        transform: `translate(${getWid(tableStyle.margins, 'left')} ${getWid(tableStyle.margins, 'top')})`,
        ...(isRoundedCorner ? { mask: `url(#${maskName})` } : {}),
    }, ...rowsContent));
};
//# sourceMappingURL=SVGTableBase.js.map
;// CONCATENATED MODULE: ../node_modules/@shjeon0730/svg-table-core/dist/index.js






//# sourceMappingURL=index.js.map
;// CONCATENATED MODULE: ../node_modules/@shjeon0730/svg-table-vanilla/dist/utils.js
const kebabize = (str) => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? '-' : '') + $.toLowerCase());
const convertVal = (val, key) => {
    if (typeof val !== 'number' && !val)
        return '';
    if (typeof val === 'object') {
        if (Array.isArray(val)) {
            console.error('something is wrong.. value type cannot be array', 'key:', key, 'val:', val);
            return '';
        }
        return Object.entries(val)
            .map(([k, v]) => {
            return `${kebabize(k)}:${v}`;
        })
            .join(';');
    }
    return `${val}`;
};
const convertAttrToHtmlStyle = (attrName) => {
    if (attrName === 'className')
        return 'class';
    switch (attrName) {
        case 'viewBox':
            return attrName;
    }
    if (attrName.match(/[A-Z]+/)) {
        const newKey = kebabize(attrName);
        return newKey;
    }
    return attrName;
};
const convertToKebabCaseProps = (attrs) => {
    const kebabCaseProps = Object.keys(attrs).reduce((curr, key) => {
        const convertedKey = convertAttrToHtmlStyle(key);
        const converted = `${convertVal(attrs[key], key)}`;
        if (!converted)
            return curr;
        return { ...curr, [convertedKey]: converted };
    }, {});
    return kebabCaseProps;
};
const createVanillaElement = (type, attrs, ...children) => {
    return {
        __internal: 'svg-table-element-as-obj',
        type,
        attrs,
        children,
    };
};
const createRenderedString = (...renderedHtml) => {
    return {
        __internal: 'svg-table-rendered-text',
        type: 'g',
        attrs: {},
        children: [renderedHtml.join('')],
    };
};
const __private__ = {
    convertVal,
    convertAttrToHtmlStyle,
};
//# sourceMappingURL=utils.js.map
;// CONCATENATED MODULE: ../node_modules/@shjeon0730/svg-table-vanilla/dist/svgConverter.js

const svgConverter = (element) => {
    if (element === null || element === undefined)
        return '';
    if (typeof element === 'string')
        return element;
    if (Array.isArray(element)) {
        return element.map(c => svgConverter(c)).join('\n');
    }
    if (typeof element !== 'object') {
        if (typeof element !== 'number' && !element)
            return '';
        return svgConverter(element);
    }
    const el = element;
    if (el.type && el.attrs && el.__internal === 'svg-table-element-as-obj') {
        const children = typeof el.children === 'string'
            ? el.children
            : el.children
                ? el.children
                    .map(c => (typeof c === 'boolean' && !c ? null : svgConverter(c)))
                    .filter(v => v)
                    .join('\n')
                : '';
        const kebabCaseProps = convertToKebabCaseProps(el.attrs);
        const attrs = Object.entries(kebabCaseProps)
            .map(entry => {
            const [key, val] = entry;
            return `${key}="${val}"`;
        })
            .filter(v => v)
            .join(' ');
        return `<${el.type} ${attrs}>${children}</${el.type}>`;
    }
    if (el.__internal === 'svg-table-rendered-text') {
        const children = typeof el.children === 'string' ? el.children : el.children ? el.children.filter(v => v).join('\n') : '';
        return children;
    }
    return element.outerHTML;
};
//# sourceMappingURL=svgConverter.js.map
;// CONCATENATED MODULE: ../node_modules/@shjeon0730/svg-table-vanilla/dist/SVGTable.js


const SVGTable = (tableProps) => {
    const element = SVGTableBase(tableProps);
    return svgConverter(element);
};
//# sourceMappingURL=SVGTable.js.map
;// CONCATENATED MODULE: ../node_modules/@shjeon0730/svg-table-vanilla/dist/index.js




/* harmony default export */ const dist = (SVGTable);
//# sourceMappingURL=index.js.map
;// CONCATENATED MODULE: ./index.ts
// @ts-ignore

// @ts-ignore


SVGTableVanilla = __webpack_exports__;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,